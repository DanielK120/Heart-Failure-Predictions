lm.fit <- lm(ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr, data = mus.data)
summary(lm.fit)
cor(mus.data$hi_empunion, mus.data$ssiratio)
cor(mus.data$hi_empunion, mus.data$multlc)
# packages
library(tidyverse)
## ----data-----------------------------------------------------------------------------------------------------
data <- read_dta("D:\\Uni\\6. Semester\\Applied Econometrics 2\\Homework 2\\mus06data.dta")
## ----data-----------------------------------------------------------------------------------------------------
data <- read_dta("D:\\Uni\\6. Semester\\Applied Econometrics 2\\Homework 2\\mus06data.dta")
skim(data) # -> all data are complete except for linc
# remove observations where linc = NA
data <- data %>%
drop_na()
## ----OLS------------------------------------------------------------------------------------------------------
ols_mod <- lm(data = data, formula = ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr)
summary(ols_mod)
# correlation matrix
data %>% select(hi_empunion, ssiratio, multlc) %>%
cor() %>%
kable()
library(knitr)
library(haven)      # for function read_dta()
# correlation matrix
data %>% select(hi_empunion, ssiratio, multlc) %>%
cor() %>%
kable()
# regression
lm(data = data, formula = hi_empunion ~ ssiratio + multlc) %>% summary()
mus.data <- read_dta("D:\\Uni\\6. Semester\\Applied Econometrics 2\\Homework 2\\mus06data.dta")
mus.data <- na.omit(mus.data)
lm.fit <- lm(ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr, data = mus.data)
summary(lm.fit)
cor(mus.data[, c("hi_empunion", "ssiratio", "multlc")])
fit.instruments <- lm(hi_empunion ~ ssiration + mutlc, data = mus.data)
fit.instruments <- lm(hi_empunion ~ ssiratio + mutlc, data = mus.data)
fit.instruments <- lm(hi_empunion ~ ssiratio + multlc, data = mus.data)
summary(fit.instruments)
install.packages("ivreg")
library("ivreg")
?ivreg
fit.instrument.ssiratio <- ivreg(ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr | hi_empunion ~ ssiratio)
fit.instrument.ssiratio <- ivreg(ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr | hi_empunion ~ ssiratio, data = mus.data)
fit.instrument.ssiratio <- ivreg(ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr | hi_empunion + ssiratio,
data = mus.data)
fit.instrument.ssiratio <- ivreg(ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr | ssiratio,
data = mus.data)
fit.instrument.ssiratio <- ivreg(ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr |
ssiratio + age + female + blhisp + linc + totchr,
data = mus.data)
fit.instrument.ssiratio <- ivreg(ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr |
ssiratio + age + female + blhisp + linc + totchr,
data = mus.data)
fit.instrument.ssiratio
summary(fit.instrument.ssiratio)
## ----data-----------------------------------------------------------------------------------------------------
data <- read_dta("D:\\Uni\\6. Semester\\Applied Econometrics 2\\Homework 2\\mus06data.dta")
skim(data) # -> all data are complete except for linc
# remove observations where linc = NA
data <- data %>%
drop_na()
## ----OLS------------------------------------------------------------------------------------------------------
ols_mod <- lm(data = data, formula = ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr)
## ----IV-------------------------------------------------------------------------------------------------------
# instrument: ssiratio
iv_d <- ivreg(data = data, formula = ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr | ssiratio + age + female + blhisp + linc + totchr )
summary(iv_d)
## ----data-----------------------------------------------------------------------------------------------------
data <- read_dta("D:\\Uni\\6. Semester\\Applied Econometrics 2\\Homework 2\\mus06data.dta")
skim(data) # -> all data are complete except for linc
# remove observations where linc = NA
data <- data %>%
drop_na()
## ----IV-------------------------------------------------------------------------------------------------------
# instrument: ssiratio
iv_d <- ivreg(data = data, formula = ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr | ssiratio + age + female + blhisp + linc + totchr )
summary(iv_d)
library("haven")
mus.data <- read_dta("D:\\Uni\\6. Semester\\Applied Econometrics 2\\Homework 2\\mus06data.dta")
mus.data <- na.omit(mus.data)
lm.fit <- lm(ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr, data = mus.data)
summary(lm.fit)
cor(mus.data[, c("hi_empunion", "ssiratio", "multlc")])
fit.instruments <- lm(hi_empunion ~ ssiratio + multlc, data = mus.data)
summary(fit.instruments)
library("ivreg")
fit.instrument.ssiratio <- ivreg(ldrugexp ~ hi_empunion + age + female + blhisp + linc + totchr |
ssiratio + age + female + blhisp + linc + totchr,
data = mus.data)
summary(fit.instrument.ssiratio)
fit.instrument.ssiratio$instruments
fit.instrument.ssiratio$endogenous
fit.instruments <- lm(hi_empunion ~ ssiratio, data = mus.data)
fit.instruments <- lm(hi_empunion ~ ssiratio + age + female + blhisp + linc + totchr, data = mus.data)
fit.2sls.1 <- lm(hi_empunion ~ ssiratio + age + female + blhisp + linc + totchr, data = mus.data)
fitted.2sls.1 <- fitted(fit.2sls.1)
fitted.2sls.1
fit.2sls.2 <- lm(ldrugexp ~ fitted.2sls.1 + age + female + blhisp + linc + totchr, data = mus.data)
summary(fit.2sls.2)
summary(fit.instrument.ssiratio)
fit.2sls.1 <- lm(hi_empunion ~ ssiratio + age + female + blhisp + linc + totchr, data = mus.data)
fitted.2sls.1 <- fit.2sls.1$fitted.values
fit.2sls.2 <- lm(ldrugexp ~ fitted.2sls.1 + age + female + blhisp + linc + totchr, data = mus.data)
summary(fit.2sls.2)
all.equal(fit.2sls.2$coefficients, fit.instrument.ssiratio$coefficients)
fit.instrument.ssiratio$coefficients
fit.2sls.2$coefficients
fit.instrument.ssiratio$coefficients[1]
coef.ivreg <- fit.instrument.ssiratio$coefficients
coef.ivreg
names(coef.ivreg) <- NULL
coef.ivreg
coef.byhand <- fit.2sls.2$coefficients
names(coef.byhand) <- NULL
all.equal(coef.ivreg, coef.byhand)
library("haven")
card.data <- read_dta("D:\\Uni\\6. Semester\\Applied Econometrics 2\\Homework 2\\card_data.dta")
View(card.data)
View(card.data)
card.data <- na.omit(card.data)
card.data <- read_dta("D:\\Uni\\6. Semester\\Applied Econometrics 2\\Homework 2\\card_data.dta")
card.data <- na.omit(card.data)
colnames(card.data)
fit.lm <- lm(lwage ~ educ + age + black + IQ + exper + region, data = card.data)
summary(fit.lm)
fit.lm <- lm(lwage ~ educ + age + black + IQ + exper + region, data = card.data)
summary(fit.lm)
fit.lm <- lm(lwage ~ educ + age + black + IQ + expersq + region, data = card.data)
summary(fit.lm)
fit.lm <- lm(lwage ~ educ + age + black + IQ + exper + region, data = card.data)
summary(fit.lm)
fit.lm <- lm(lwage ~ educ + age + black + IQ + expersq + region, data = card.data)
summary(fit.lm)
fit.lm <- lm(lwage ~ educ + age + black + IQ + expersq + region + married, data = card.data)
summary(fit.lm)
fit.lm <- lm(lwage ~ educ + age + black + IQ + married + expersq + region, data = card.data)
summary(fit.lm)
card.data <- read_dta("D:\\Uni\\6. Semester\\Applied Econometrics 2\\Homework 2\\card_data.dta")
fit.lm <- lm(lwage ~ educ + age + black + IQ + married + expersq + region, data = card.data)
summary(fit.lm)
card.data <- read_dta("D:\\Uni\\6. Semester\\Applied Econometrics 2\\Homework 2\\card_data.dta")
colnames(card.data)
fit.lm <- lm(lwage ~ educ + age + black + IQ + married + expersq + region, data = card.data)
summary(fit.lm)
fit.lm <- lm(lwage ~ educ + age + black + IQ + married + exper + region, data = card.data)
summary(fit.lm)
fit.lm <- lm(lwage ~ educ + age + black + IQ + married + expersq + region, data = card.data)
summary(fit.lm)
cor(card.data[, c("educ", "fatheduc", "motheduc")])
View(card.data)
cor(card.data[, c("educ", "fatheduc", "motheduc")], na.rm = TRUE)
card.data
card.data <- na.omit(card.data)
cor(card.data[, c("educ", "fatheduc", "motheduc")])
View(card.data)
cor(card.data[, c("educ", "fatheduc", "motheduc", "nearc4", "libcrd14")])
cor(card.data[, c("educ", "fatheduc", "motheduc", "nearc4", "nearc2", "libcrd14")])
fit.2sls.1 <- lm(educ ~ educ + age + black + IQ + married + expersq + region +
fatheduc + motheduc + nearc4 + libcrd14, data = card.data)
fit.2sls.1 <- lm(educ ~ age + black + IQ + married + expersq + region +
fatheduc + motheduc + nearc4 + libcrd14, data = card.data)
fitted.2sls.1 <- fit.2sls.1$fitted.values
fit.2sls.2 <- lm(lwage ~ fitted.2sls.1 + age + black + IQ + married + expersq + region, data = card.data)
summary(fit.2sls.2)
library("ivreg")
fit.instrument.educ <- ivreg(lwage ~ educ + age + black + IQ + married + expersq + region |
fatheduc + motheduc + nearc4 + libcrd14,
data = card.data)
summary(fit.instrument.educ)
fit.instrument.educ <- ivreg(lwage ~ educ + age + black + IQ + married + expersq + region |
fatheduc + motheduc + nearc4 + libcrd14+ IQ + married + expersq + region,
data = card.data)
summary(fit.instrument.educ)
fit.2sls.1 <- lm(educ ~ age + black + IQ + married + expersq + region +
fatheduc + motheduc + nearc4 + libcrd14, data = card.data)
fitted.2sls.1 <- fit.2sls.1$fitted.values
fit.2sls.2 <- lm(lwage ~ fitted.2sls.1 + age + black + IQ + married + expersq + region, data = card.data)
summary(fit.2sls.2)
fit.2sls.1 <- lm(educ ~ age + black + IQ + married + expersq + region +
fatheduc + motheduc + nearc4 + libcrd14, data = card.data)
fitted.2sls.1 <- fit.2sls.1$fitted.values
fit.2sls.2 <- lm(lwage ~ fitted.2sls.1 + age + black + IQ + married + expersq + region, data = card.data)
summary(fit.2sls.2)
summary(fit.instrument.educ)
fit.instrument.educ <- ivreg(lwage ~ educ + age + black + IQ + married + expersq + region |
fatheduc + motheduc + nearc4 + libcrd14,
data = card.data)
summary(fit.instrument.educ)
fit.instrument.educ <- ivreg(lwage ~ educ + age + black + IQ + married + expersq + region |
fatheduc + motheduc + nearc4 + libcrd14 + IQ + married + expersq + region,
data = card.data)
summary(fit.instrument.educ)
summary(fit.2sls.1)
fit.2sls.2 <- lm(lwage ~ fitted.2sls.1 + age + black + IQ + married + expersq + region, data = card.data)
summary(fit.2sls.2)
fit.instrument.educ <- ivreg(lwage ~ educ + age + black + IQ + married + expersq + region |
fatheduc + motheduc + nearc4 + libcrd14 + IQ + married + expersq + region,
data = card.data)
summary(fit.instrument.educ)
fit.instrument.educ <- ivreg(lwage ~ educ + age + black + IQ + married + expersq + region |
fatheduc + motheduc + nearc4 + libcrd14 + age + black + IQ + married + expersq + region,
data = card.data)
summary(fit.instrument.educ)
```{r}
fit.instrument.educ <- ivreg(lwage ~ educ + age + black + IQ + married + expersq + region |
fatheduc + motheduc + nearc4 + libcrd14 + age + black
+ IQ + married + expersq + region,
data = card.data)
summary(fit.instrument.educ)
coef.ivreg <- fit.instrument.educ$coefficients
names(coef.ivreg) <- NULL
coef.byhand <- fit.2sls.2$coefficients
names(coef.byhand) <- NULL
all.equal(coef.ivreg, coef.byhand)
plot(fit.2sls.2$residuals)
plot(fit.instrument.educ$residuals)
plot(fit.2sls.2$residuals)
plot(fit.instrument.educ$residuals)
plot(fit.2sls.2$residuals, col = "blue")
points(fit.instrument.educ$residuals, col = "red")
# daten einlesen
cohort.data <- read.csv("D:\\Uni\\6. Semester\\Versicherungsmathematik\\UE3\\lt_cohort.csv")
# alter berechnen
cohort.data$Alter <- cohort.data$dyear - cohort.data$byear
# histogramm, boxplot alter
hist(cohort.data$Alter)
boxplot(cohort.data$Alter)
# umdrehen der einträge um die negativen jahre richtig zu berechnen
index.yearsmaller0 <- which(cohort.data$Alter < 0)
cohort.data[index.yearsmaller0, ]
byear.bool <- cohort.data[index.yearsmaller0, ]$dyear
cohort.data[index.yearsmaller0, ]$dyear <- cohort.data[index.yearsmaller0, ]$byear
cohort.data[index.yearsmaller0, ]$byear <- byear.bool
cohort.data$Alter <- cohort.data$dyear - cohort.data$byear
hist(cohort.data$Alter)
boxplot(cohort.data$Alter)
# cohorten erstellen
cohort.data$cohort <- ifelse(cohort.data$dyear < 1900, 1, ifelse(cohort.data$dyear >= 1900 & cohort.data$dyear <= 1945, 2, 3))
# erstellung mort.-table
mortalitytable <- data.frame(cohort = character(),
gender = character(),
min = numeric(),
max = numeric(),
n = numeric(),
lx = numeric(),
ndx = numeric())
cohort.bool <- data.frame()
# berechnung der parameter
c <- 1
while (c <= 3) {
for (g in c("Male", "Female")) {
if (g == "Male") {
cohort.bool <- cohort.data[cohort.data$sex == "Male" & cohort.data$cohort == c, ]
} else {
cohort.bool <- cohort.data[cohort.data$sex == "Female" & cohort.data$cohort == c, ]
}
min <- seq(0, max(cohort.bool$Alter), by = 10)
max <- min + 10
n <- rep(10, length(min))
lx <- sapply(min, function(x) sum(cohort.bool$Alter >= x))
ndx <- lx - c(lx[-1], 0)
mortalitytable <- rbind(mortalitytable, data.frame(cohort = c,
sex = g,
min = min,
max = max,
n = n,
lx = lx,
ndx = ndx))
cohort.bool <- data.frame()
}
c <- c + 1
}
print(head(mortalitytable))
print(mortalitytable)
library("tidyverse")
ggplot(data = mortalitytable) +
geom_line(aes(x = max, y = lx, color = interaction(cohort, sex)), size = 1.2) +
scale_x_continuous(name = "Age", breaks = seq(0, 110, by = 10)) +
scale_y_continuous(name = "lx") +
labs(color = "Group")
# Plot von lx
library("tidyverse")
ggplot(data = mortalitytable) +
geom_line(aes(x = max, y = lx, color = interaction(cohort, sex)), size = 1.2) +
scale_x_continuous(name = "Age", breaks = seq(0, 110, by = 10)) +
scale_y_continuous(name = "lx") +
labs(color = "Group")
# Plot von lx
library("tidyverse")
ggplot(data = mortalitytable) +
geom_line(aes(x = max, y = lx, color = interaction(cohort, sex)), size = 1.2) +
scale_x_continuous(name = "Age", breaks = seq(0, 110, by = 10)) +
scale_y_continuous(name = "lx") +
labs(color = "Group")
library("xtable")
library("kableExtra")
install.packages("kableExtra")
library("kableExtra")
library("knitr")
library("kableExtra")
kable(mortalitytable, "latex", booktabs = T) %>%
kable_styling(latex_options = c("striped", "scale_down"))
# Plot von lx
library("tidyverse")
ggplot(data = mortalitytable) +
geom_line(aes(x = max, y = lx, color = interaction(cohort, sex)), size = 1.2) +
scale_x_continuous(name = "Age", breaks = seq(0, 110, by = 10)) +
scale_y_continuous(name = "lx") +
labs(color = "Group")
#############################################
#                                           #
#                PACKAGES                   #
#                                           #
#############################################
library("tidyverse")
library("randomForest")
library("ROCR")
library("MASS")
library("DescTools")
library("xtable")
#############################################
#                                           #
#                READ DATA                  #
#                                           #
#############################################
# setting the working directory
setwd("D:\\Uni\\6. Semester\\Seminar\\R")
# read the data
heartfail.data <- read.csv("D:\\Uni\\6. Semester\\Seminar\\R\\heart_failure_clinical_records_dataset.csv")
# check for NA's and glimpse for an overview of the data set
colSums(sapply(heartfail.data, is.na))
glimpse(heartfail.data)
# converting the categorical variables to factor
for (i in c(2, 4, 6, 10, 11, 13)) {
heartfail.data[, i] <- as.factor(heartfail.data[, i])
}
glimpse(heartfail.data)
#############################################
#                                           #
#              TRAIN/TEST SET               #
#                                           #
#############################################
# seed for reproducability
set.seed(100)
# random sampling the train and test indices
ind.train <- sample(1:nrow(heartfail.data), nrow(heartfail.data) * 0.7, replace = FALSE)
ind.train <- sort(ind.train)
ind.test <- !(1:nrow(heartfail.data) %in% ind.train)
#############################################
#                                           #
#            LOGISTIC REGRESSION            #
#                                           #
#############################################
# specifying a full and null model
fullmodel <- glm(DEATH_EVENT ~ ., data = heartfail.data, subset = ind.train, family = "binomial")
nullmodel <- glm(DEATH_EVENT ~ 1, data = heartfail.data, subset = ind.train, family = "binomial")
# applying the backward elimination algorithm
logreg.fit <- stepAIC(fullmodel,
direction = "backward",
scope = list(upper = fullmodel,
lower = nullmodel),
trace = 0)
summary(logreg.fit)
# cuttoffs for the logistic regression
cutoff.logreg <- seq(0.1, 1, 0.1)
# creating a list for the best model and parameters
# predict the outcomes
logreg.results.opt <- vector("list", 6)
names(logreg.results.opt) <- c("cutoff", "auc", "pred.dich", "pred.prob", "rocr", "brier")
logreg.results.opt$auc <- -Inf
logreg.predict.prob <- predict(logreg.fit, heartfail.data[ind.test, -13], type = "response")
# for loop's algorithm:
#   getting the dichotome predictions with the different cutoffs for every iteration
#   creating the ROCR predictions objects and compute the AUC
#   if the AUC is larger than the before best measured value
#   we replace the parameters with the cutoff based on the best AUC
for (i in cutoff.logreg) {
logreg.predict.dich <- ifelse(logreg.predict.prob > i, 1, 0)
logreg.rocr.pred <- prediction(logreg.predict.dich, heartfail.data[ind.test, 13])
logreg.rocr.auc <- performance(logreg.rocr.pred, measure = "auc")
print(logreg.rocr.auc@y.values)
if (logreg.rocr.auc@y.values[[1]] > logreg.results.opt$auc) {
logreg.results.opt$cutoff <- i
logreg.results.opt$auc <- logreg.rocr.auc@y.values[[1]]
logreg.results.opt$pred.dich <- logreg.predict.dich
logreg.results.opt$pred.prob <- logreg.predict.prob
logreg.results.opt$rocr <- prediction(logreg.predict.prob, heartfail.data[ind.test, 13])
logreg.results.opt$brier <- BrierScore(as.numeric(as.character(heartfail.data[ind.test, 13])),
logreg.predict.prob)
}
}
#############################################
#                                           #
#               RANDOM FOREST               #
#                                           #
#############################################
cutoff.rf <- seq(0.1, 1, 0.1)
rf.results.opt <- vector("list", 6)
set.seed(123)
names(rf.results.opt) <- c("cutoff", "auc", "pred.dich", "pred.prob", "rocr", "brier")
rf.results.opt$auc <- -Inf
fit.rf <- tuneRF(heartfail.data[ind.train, -13], heartfail.data[ind.train, 13], doBest = TRUE)
rf.predict.prob <- predict(fit.rf, heartfail.data[ind.test, -13], type = "prob")[, 2]
# loop works the same as for the logistic regression
for (i in cutoff.rf) {
rf.predict.dich <- ifelse(rf.predict.prob > i, 1, 0)
rf.rocr.pred <- prediction(rf.predict.dich, heartfail.data[ind.test, 13])
rf.rocr.auc <- performance(rf.rocr.pred, measure = "auc")
print(rf.rocr.auc@y.values)
if (rf.rocr.auc@y.values[[1]] > rf.results.opt$auc) {
rf.results.opt$cutoff <- i
rf.results.opt$auc <- rf.rocr.auc@y.values[[1]]
rf.results.opt$pred.dich <- rf.predict.dich
rf.results.opt$pred.prob <- rf.predict.prob
rf.results.opt$rocr <- prediction(rf.predict.prob, heartfail.data[ind.test, 13])
rf.results.opt$brier <- BrierScore(as.numeric(as.character(heartfail.data[ind.test, 13])),
rf.predict.prob)
}
}
#############################################
#                                           #
#                 RESULTS                   #
#                                           #
#############################################
# confusion matrix for the results
table(heartfail.data[ind.test, 13], logreg.results.opt$pred.dich)
table(heartfail.data[ind.test, 13], rf.results.opt$pred.dich)
# plotting the ROC curves
ggplot() +
geom_line(aes(x = performance(logreg.results.opt$rocr, measure = "rch")@x.values[[1]],
y = performance(logreg.results.opt$rocr, measure = "rch")@y.values[[1]],
color = "Logistic Regression"),
linewidth = 1.15, alpha = 0.7) +
geom_line(aes(x = performance(rf.results.opt$rocr, measure = "rch")@x.values[[1]],
y = performance(rf.results.opt$rocr, measure = "rch")@y.values[[1]],
color = "Random Forest"),
linewidth = 1.15, alpha = 0.7) +
xlab("False-Positive-Rate") +
ylab("True-Positive-Rate") +
scale_color_manual(name = "Method",
breaks = c("Logistic Regression", "Random Forest"),
values = c("Logistic Regression" = "red", "Random Forest" = "blue")) +
theme(legend.position="bottom")
# calculation of the performance measurements
logreg.sens <- performance(logreg.results.opt$rocr, measure = "sens")
rf.sens <- performance(rf.results.opt$rocr, measure = "sens")
logreg.sens <- logreg.sens@y.values[[1]][max(which(logreg.sens@x.values[[1]] >
logreg.results.opt$cutoff))]
rf.sens <- rf.sens@y.values[[1]][max(which(rf.sens@x.values[[1]] >
rf.results.opt$cutoff))]
logreg.spec <- performance(logreg.results.opt$rocr, measure = "spec")
rf.spec <- performance(rf.results.opt$rocr, measure = "spec")
logreg.spec <-logreg.spec@y.values[[1]][max(which(logreg.spec@x.values[[1]] >
logreg.results.opt$cutoff))]
rf.spec <-rf.spec@y.values[[1]][max(which(rf.spec@x.values[[1]] >
rf.results.opt$cutoff))]
logreg.acc <- performance(logreg.results.opt$rocr, measure = "acc")
rf.acc <- performance(rf.results.opt$rocr, measure = "acc")
logreg.acc <- logreg.acc@y.values[[1]][max(which(logreg.acc@x.values[[1]] >
logreg.results.opt$cutoff))]
rf.acc <- rf.acc@y.values[[1]][max(which(rf.acc@x.values[[1]] >
rf.results.opt$cutoff))]
logreg.auc <- performance(logreg.results.opt$rocr, measure = "auc")
rf.auc <- performance(rf.results.opt$rocr, measure = "auc")
logreg.auc <- logreg.auc@y.values
rf.auc <- rf.auc@y.values
rf.importance <- as.matrix(importance(fit.rf)[order(importance(fit.rf), decreasing = TRUE), ])
quant.measures <- matrix(c(logreg.acc, logreg.sens, logreg.spec, logreg.auc, logreg.results.opt$brier,
rf.acc, rf.sens, rf.spec, rf.auc, rf.results.opt$brier),
ncol = 2)
colnames(quant.measures) <- c("Logistic Regression", "Random Forest")
rownames(quant.measures) <- c("Accuracy", "Sensitivity", "Specificity", "AUC", "Brier Score")
# tables for latex
print(xtable(logreg.fit, type = "latex"), file = "logreg.tex")
print(xtable(rf.importance, type = "latex"), file = "rf.tex")
print(xtable(quant.measures, type = "latex"), file = "quant.measures.tex")
library("tidyverse")
library("randomForest")
library("ROCR")
library("MASS")
library("DescTools")
library("xtable")
#############################################
#                                           #
#                READ DATA                  #
#                                           #
#############################################
# setting the working directory
setwd("D:\\Uni\\6. Semester\\Seminar\\R")
# read the data
heartfail.data <- read.csv("D:\\Uni\\6. Semester\\Seminar\\R\\heart_failure_clinical_records_dataset.csv")
# check for NA's and glimpse for an overview of the data set
colSums(sapply(heartfail.data, is.na))
glimpse(heartfail.data)
cor(heartfail.data)
?cor
cor(heartfail.data, method = "spearman")
cor(heartfail.data, method = "spearman")[, 13]
order(cor(heartfail.data, method = "spearman")[, 13], decreasing = TRUE)
heartfail.data[, 13][order(abs(cor(heartfail.data, method = "spearman")[, 13], decreasing = TRUE))]
[order(abs(cor(heartfail.data, method = "spearman")[, 13], decreasing = TRUE))]
order(abs(cor(heartfail.data, method = "spearman")[, 13], decreasing = TRUE))
cor(heartfail.data, method = "spearman")[, 13]
heartfail.data[, 13][order(abs(cor(heartfail.data, method = "spearman")[, 13]), decreasing = TRUE)]
heartfail.data[, 13]
heartfail.data
cor(heartfail.data)[, 13][order(abs(cor(heartfail.data, method = "spearman")[, 13]), decreasing = TRUE)]
as.matrix(cor(heartfail.data)[, 13][order(abs(cor(heartfail.data, method = "spearman")[, 13]), decreasing = TRUE)])
abs(cor(heartfail.data, method = "spearman")[, 13])
order(abs(cor(heartfail.data, method = "spearman")[, 13]), decreasing = TRUE)
as.matrix(cor(heartfail.data)[, 13][order(abs(cor(heartfail.data, method = "spearman")[, 13]), decreasing = TRUE)])
as.matrix(cor(heartfail.data, method = "spearman")[, 13][order(abs(cor(heartfail.data, method = "spearman")[, 13]), decreasing = TRUE)])
